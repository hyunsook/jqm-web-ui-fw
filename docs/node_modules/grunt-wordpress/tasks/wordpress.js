/*
 * grunt-wordpress
 * https://github.com/scottgonzalez/grunt-wordpress
 *
 * Copyright (c) 2012 Scott Gonz√°lez
 * Licensed under the MIT license.
 */

module.exports = function( grunt ) {
	"use strict";

	//[[OLDCODE:hyunsook.park by updated]] - Use a relative path of file insted of grunt.task.getFile()
	/*
	require( grunt.task.getFile( "wordpress/posts.js" ) )( grunt );
	require( grunt.task.getFile( "wordpress/taxonomies.js" ) )( grunt );
	require( grunt.task.getFile( "wordpress/resources.js" ) )( grunt );
	*/
	var posts = require( "./wordpress/posts.js" ).init( grunt ),
		taxonomies = require( "./wordpress/taxonomies.js" ).init( grunt ),
		resources = require( "./wordpress/resources.js" ).init( grunt ),
	//var _client, //[[OLDCODE:hyunsook.park by updated]] - Move to wordpress_client()
		path = require( "path" ),
		//wordpress = require( "wordpress" ), //[[OLDCODE:hyunsook.park by updated]] - Move to wordpress_client()
		async = grunt.util.async;
		//version = require( "../package" ).version; //[[OLDCODE:hyunsook.park by updated]] - Move to wordpress_client()

	//[[OLDCODE:hyunsook.park by updated]] - Change from grunt.registerHelper( "wordpress-recurse", ... ) to module.exports.wordpress_recurse()
	/*
	// Async directory recursion, always walks all files before recursing
	grunt.registerHelper( "wordpress-recurse", function recurse( rootdir, fn, complete ) {
		var path = rootdir + "/*";
		async.forEachSeries( grunt.file.expandFiles( path ), fn, function( error ) {
			if ( error ) {
				return complete( error );
			}

			async.forEachSeries( grunt.file.expandDirs( path ), function( dir, dirComplete ) {
				recurse( dir, fn, dirComplete );
			}, complete );
		});
	});
	*/

	//[[OLDCODE:hyunsook.park by updated]] - Move to module.exports.wordpress_client()
	/*
	function config() {
		var target = grunt.config( "target" ) || grunt.config( "wordpress._default" ),
			base = grunt.config( "wordpress" );
		if ( target ) {
			return base[ target ];
		}
		return base;
	}
	*/

	//[[OLDCODE:hyunsook.park by updated]] - Change from grunt.registerHelper( "wordpress-client", ... ) to module.exports.wordpress_client()
	/*
	grunt.registerHelper( "wordpress-client", function() {
		if ( !_client ) {
			_client = wordpress.createClient( config() );
		}
		return _client;
	});
	*/

	//[[OLDCODE:hyunsook.park by updated]] - Change from grunt.registerHelper( "wordpress-validate-xmlrpc-version", ... ) to module.exports.wordpress_validate_xmlrpc_version()
	/*
	grunt.registerHelper( "wordpress-validate-xmlrpc-version", function( fn ) {
		var client = grunt.helper( "wordpress-client" );
		grunt.verbose.write( "Verifying XML-RPC version..." );
		client.authenticatedCall( "gw.getVersion", function( error, xmlrpcVersion ) {
			if ( error ) {
				grunt.verbose.error();

				if ( error.code === "ECONNREFUSED" ) {
					return fn( new Error( "Could not connect to WordPress." ) );
				}
				if ( error.code === -32601 ) {
					return fn( new Error(
						"XML-RPC extensions for grunt-wordpress are not installed." ) );
				}
				if ( !error.code ) {
					return fn( new Error( "Unknown error. " +
						"Please ensure that your database server is running " +
						"and WordPress is functioning properly." ) );
				}

				// XML-RPC is disabled or bad credentials
				// WordPress provides good error messages, so we don't do any special handling
				return fn( error );
			}

			if ( xmlrpcVersion !== version ) {
				return fn( new Error( "Mismatching versions. " +
					"grunt-wordpress: " + version + "; XML-RPC version: " + xmlrpcVersion ) );
			}

			grunt.verbose.ok();
			fn( null );
		});
	});
	*/

	grunt.registerTask( "wordpress-sync", "Synchronize WordPress with local content", function() {
		this.requires( "wordpress-validate" );

		var done = this.async(),
			dir = grunt.config( "wordpress.dir" );

		async.waterfall([
			function syncTerms( fn ) {
				//[[OLDCODE:hyunsook.park by updated]] - Use taxonomies.wordpress_sync_terms() instead of grunt.helper( "wordpress-sync-terms", ... )
				//grunt.helper( "wordpress-sync-terms", path.join( dir, "taxonomies.json" ), fn );
				taxonomies.wordpress_sync_terms( path.join( dir, "taxonomies.json" ), fn );
			},

			function syncPosts( termMap, fn ) {
				//[[OLDCODE:hyunsook.park by updated]] - Use posts.wordpress_sync_posts() instead of grunt.helper( "wordpress-sync-posts", ... )
				//grunt.helper( "wordpress-sync-posts", path.join( dir, "posts/" ), termMap, fn );
				posts.wordpress_sync_posts( path.join( dir, "posts/" ), termMap, fn );
			},

			function syncResources( fn ) {
				//[[OLDCODE:hyunsook.park by updated]] - Use resources.wordpress_sync_resources() instead of grunt.helper( "wordpress-sync-resources", ... )
				//grunt.helper( "wordpress-sync-resources", path.join( dir, "resources/" ), fn );
				resources.wordpress_sync_resources( path.join( dir, "resources/" ), fn );
			}
		], function( error ) {
			if ( !error ) {
				return done();
			}

			if ( error.code === "ECONNREFUSED" ) {
				grunt.log.error( "Could not connect to WordPress XML-RPC server." );
			} else {
				grunt.log.error( error );
			}

			done( false );
		});
	});

	grunt.registerTask( "wordpress-validate", "Validate HTML files for synchronizing WordPress", function() {
		var done = this.async(),
			dir = grunt.config( "wordpress.dir" );

		async.waterfall([
			function( fn ) {
				//[[OLDCODE:hyunsook.park by updated]] - Use module.exports.wordpress_validate_xmlrpc_version() instead of grunt.helper( "wordpress-validate-xmlrpc-version", ... )
				//grunt.helper( "wordpress-validate-xmlrpc-version", fn );
				module.exports.wordpress_validate_xmlrpc_version( grunt, fn );
			},

			function( fn ) {
				//[[OLDCODE:hyunsook.park by updated]] - Use taxonomies.wordpress_validate_terms() instead of grunt.helper( "wordpress-validate-terms", ... )
				//grunt.helper( "wordpress-validate-terms", path.join( dir, "taxonomies.json" ), fn );
				taxonomies.wordpress_validate_terms( path.join( dir, "taxonomies.json" ), fn );
			},

			function( fn ) {
				//[[OLDCODE:hyunsook.park by updated]] - Use posts.wordpress_validate_posts() instead of grunt.helper( "wordpress-validate-posts", ... )
				//grunt.helper( "wordpress-validate-posts", path.join( dir, "posts/" ), fn );
				posts.wordpress_validate_posts( path.join( dir, "posts/" ), fn );
			}
		], function( error ) {
			if ( error ) {
				grunt.log.error( error );
				return done( false );
			}

			done();
		});
	});

	grunt.registerTask( "target", "Runtime configuration to choose deployment target", function( target ) {
		grunt.config.set( "target", target );
	});

	grunt.registerTask( "wordpress-publish", [ "wordpress-validate", "wordpress-sync" ] );
	grunt.registerTask( "wordpress-deploy", [ "build-wordpress", "wordpress-publish" ] );
	grunt.registerTask( "deploy", [ "wordpress-deploy" ] );

};

//[[NEWCODE:hyunsook.park by updated]] - Change from grunt.registerHelper( "wordpress-recurse", ... ) to module.exports.wordpress_recurse()
// Async directory recursion, always walks all files before recursing
module.exports.wordpress_recurse = function recurse( grunt, rootdir, fn, complete ) {
	var async = grunt.util.async, //[[NEWCODE:hyunsook.park by updated]] - Add by changing to module.exports.wordpress_recurse()
		path = rootdir + "/*";

	//[[OLDCODE:hyunsook.park by updated]] - Use grunt.file.expand() instead of grunt.file.expandFiles()
	//async.forEachSeries( grunt.file.expandFiles( path ), fn, function( error ) {
	async.forEachSeries( grunt.file.expand( { filter: "isFile" }, path ), fn, function( error ) {
		if ( error ) {
			return complete( error );
		}

		//[[OLDCODE:hyunsook.park by updated]] - Use grunt.file.expand() instead of grunt.file.expandDirs()
		//async.forEachSeries( grunt.file.expandDirs( path ), function( dir, dirComplete ) {
		async.forEachSeries( grunt.file.expand( { filter: "isDirectory" }, path ), function( dir, dirComplete ) {
			//[[OLDCODE:hyunsook.park by updated]] - Change by adding grunt in recurse()
			//recurse( dir, fn, dirComplete );
			recurse( grunt, dir, fn, dirComplete );
		}, complete );

	});
};

//[[NEWCODE:hyunsook.park by updated]] - Change from grunt.registerHelper( "wordpress-client", ... ) to module.exports.wordpress_client()
module.exports.wordpress_client = function( grunt ) {
	//[[NEWCODE:hyunsook.park by updated]] - Move from module.exports function
	function config() {
		var target = grunt.config( "target" ) || grunt.config( "wordpress._default" ),
			base = grunt.config( "wordpress" );
		if ( target ) {
			return base[ target ];
		}
		return base;
	}

	var wordpress = require( "wordpress" ), //[[NEWCODE:hyunsook.park by updated]] - Move from module.exports function
		_client; //[[NEWCODE:hyunsook.park by updated]] - Move from module.exports function

	if ( !_client ) {
		_client = wordpress.createClient( config() );
	}

	return _client;
};

//[[NEWCODE:hyunsook.park by updated]] - Change from grunt.registerHelper( "wordpress-validate-xmlrpc-version", ... ) to module.exports.wordpress_client() 
module.exports.wordpress_validate_xmlrpc_version = function( grunt, fn ) {
	//[[OLDCODE:hyunsook.park by updated]] - Use module.exports.wordpress_client() instead of grunt.helper( "wordpress-client" )
	//var client = grunt.helper( "wordpress-client" );
	var client = module.exports.wordpress_client( grunt ),
		version = require( "../package" ).version; //[[NEWCODE:hyunsook.park by updated]] - Move from module.exports function

	grunt.verbose.write( "Verifying XML-RPC version..." );
	client.authenticatedCall( "gw.getVersion", function( error, xmlrpcVersion ) {
		if ( error ) {
			grunt.verbose.error();

			if ( error.code === "ECONNREFUSED" ) {
				return fn( new Error( "Could not connect to WordPress." ) );
			}
			if ( error.code === -32601 ) {
				return fn( new Error(
					"XML-RPC extensions for grunt-wordpress are not installed." ) );
			}
			if ( !error.code ) {
				return fn( new Error( "Unknown error. " +
					"Please ensure that your database server is running " +
					"and WordPress is functioning properly." ) );
			}

			// XML-RPC is disabled or bad credentials
			// WordPress provides good error messages, so we don't do any special handling
			return fn( error );
		}

		if ( xmlrpcVersion !== version ) {
			return fn( new Error( "Mismatching versions. " +
				"grunt-wordpress: " + version + "; XML-RPC version: " + xmlrpcVersion ) );
		}

		grunt.verbose.ok();
		fn( null );
	});
};
