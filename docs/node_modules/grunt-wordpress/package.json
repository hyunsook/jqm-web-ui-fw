{
  "name": "grunt-wordpress",
  "description": "Grunt plugin for publishing content to WordPress",
  "version": "1.0.7",
  "homepage": "https://github.com/scottgonzalez/grunt-wordpress",
  "author": {
    "name": "Scott González",
    "email": "scott.gonzalez@gmail.com",
    "url": "http://scottgonzalez.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/scottgonzalez/grunt-wordpress.git"
  },
  "bugs": {
    "url": "https://github.com/scottgonzalez/grunt-wordpress/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/scottgonzalez/grunt-wordpress/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "dependencies": {},
  "devDependencies": {
    "grunt": "~0.4.1",
    "grunt-contrib-jshint": "~0.2.0",
    "wordpress": "0.1.3"
  },
  "keywords": [
    "gruntplugin wordpress"
  ],
  "readme": "# grunt-wordpress\n\nGrunt plugin for publishing content to WordPress\n\n## Getting Started\n\nInstall this grunt plugin next to your project's\n[grunt.js gruntfile](https://github.com/cowboy/grunt/blob/master/docs/getting_started.md)\nwith: `npm install grunt-wordpress`\n\nThen add this line to your project's `grunt.js` gruntfile:\n\n```javascript\ngrunt.loadNpmTasks( \"grunt-wordpress\" );\n```\n\nFinally, copy `grunt-wordpress.js` in to your WordPress install as a plugin.\n\n## API\n\nFor most projects, you should only need to specify the `wordpress` config\nand use the `wordpress-deploy` task (or its alias `deploy`).\n\n### Config\n\n```javascript\ngrunt.initConfig({\n\twordpress: {\n\t\turl: \"wordpress.dev\",\n\t\tusername: \"admin\",\n\t\tpassword: \"admin\",\n\t\tdir: \"dist\"\n\t}\n});\n```\n\nThis works for a single deployment target. If you have multiple targets, you\ncan specify url, username and password for each:\n\n```javascript\ngrunt.initConfig({\n\twordpress: {\n\t\tdev: {\n\t\t\turl: \"wordpress.dev\",\n\t\t\tusername: \"admin\",\n\t\t\tpassword: \"admin\",\n\t\t},\n\t\tlive: {\n\t\t\turl: \"wordpress.com\",\n\t\t\tusername: \"admin\",\n\t\t\tpassword: \"admin\",\n\t\t},\n\t\t_default: \"dev\",\n\t\tdir: \"dist\"\n\t}\n});\n```\n\nIf nothing is specified, the `_default` target is used. Override using the\ntarget task:\n\n\tgrunt target:live deploy\n\n* `url`: The URL for the WordPress install.\n  Can be a full URL, e.g., `http://wordpress.dev:123/some/path`\n  or as short as just the host name.\n  If the protocol is `https`, then a secure connection will be used.\n* `username`: WordPress username.\n* `password`: WordPress password.\n* `dir`: Directory containing posts, taxonomies, and resources (see [Directory Structure](#directory-structure)).\n* `_default`: The default deployment target, optional.\n\n### Directory Structure\n\nThe `wordpress.dir` directory has the following structure:\n\n```\ndir\n├── posts\n│   └── <post_type>\n│       └── <post_name>.html\n├── resources\n│   └── <file>.<ext>\n└── taxonomies.json\n```\n\nThe `posts` directory must only contain `<post_type>` directories.\nThe `<post_type>` directories must be named to exactly match a post type, e.g., `post` or `page`.\nAll custom post types are supported.\n\nThe `resources` directory is completely freeform.\nResources of any type will be uploaded based on the current directory structure.\n\n### taxonomies.json\n\nThe `taxonomies.json` file defines all used taxonomy terms.\nYou can only manage terms, all taxonomies much already exist in WordPress.\n\n```json\n{\n\t\"<taxonomy_name>\": [\n\t\t{\n\t\t\t\"name\": \"My Term\",\n\t\t\t\"description\": \"My term is awesome\",\n\t\t\t\"slug\": \"my-term\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"My Other Term\",\n\t\t\t\"slug\": \"my-other-term\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"I'm a child term!\",\n\t\t\t\t\t\"slug\": \"hooray-for-children\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n```\n\nSlugs and names are required.\n\n### Post Files\n\nPost files must be HTML, containing the content of the post.\nPost data can be specified as JSON in a `<script>` element at the top of the file.\n\n```html\n<script>{\n\t\"title\": \"My Post\",\n\t\"termSlugs\": {\n\t\t\"<taxonomy_name>\": [\n\t\t\t\"<hierarchical_slug>\"\n\t\t]\n\t}\n}</script>\n<p>I'm a post!</p>\n```\n\nThe post type and parent are determined based on the [directory structure](#directory-structure).\n`termSlugs` must match a hierarchical slug defined in [taxonomies.json](#taxonomiesjson).\n\n### Tasks\n\n#### wordpress-validate\n\nWalks through the `wordpress.dir` directory and performs various validations, such as:\n\n* Verifying that XML-RPC is enabled for the WordPress site.\n* Verifying that the custom XML-RPC methods for grunt-wordpress are installed.\n* Verifying the taxonomies and terms in `taxonomies.json`.\n* Verifying that child-parent relationships for posts are valid.\n* Verifying data for each post.\n\n#### wordpress-sync\n\nSynchronizes everything in `wordpress.dir` to the WordPress site.\nThis will create/edit/delete terms, posts, and resources.\n\n*Note: `wordpress-validate` must run prior to `wordpress-sync`.*\n\n#### wordpress-publish\n\nAlias task for `wordpress-validate` and `wordpress-sync`.\nThis is useful if your original source content is already in the proper format,\nor if you want to manually verify generated content between your custom build and publishing.\n\n#### wordpress-deploy\n\nAlias task for `build-wordpress` and `wordpress-publish`.\nThis is useful if you are generating content for use with `wordpess-sync`.\nSimply create a `build-wordpress` task that populates the `wordpress.dir` directory\nand your deployments will be as simple as `grunt wordpress-deploy`.\n\n#### deploy\n\nAlias task for `wordpress-deploy`.\nSince most projects that use grunt-wordpress only have one deploy target (WordPress),\nthere is a built-in `deploy` task that just runs `wordpress-deploy`.\nIf your project has multiple deploy targets, you can simply re-alias the `deploy` task.\n\n### Helpers\n\n#### wordpress-recurse( path, callback, complete )\n\nWalks through all files in `path` (asynchronous and in series ).\n\n* `path`: The directory to walk through.\n* `callbak` (`function( filepath, callback )`): Callback to invoke for each file.\n  * `filepath`: Path to the current file.\n  * `callback`: A callback to invoke after processing the file.\n  Passing an error will stop the helper.\n* `complete`: (`function( error )`): Callback to invoke after walking all files.\n\n#### wordpress-client()\n\nGets a client for connecting to the WordPress site via XML-RPC.\n\n#### wordpress-validate-xmlrpc-version( callback )\n\nVerifies that the XML-RPC extensions for grunt-wordpress are installed in WordPress.\n\n* `callback` (`function( error )`): Callback to invoke after verifying.\n\n#### wordpress-validate-terms( path, callback )\n\n* `path`: The path to the taxonomies JSON file.\n* `callback` (`function( error )`): Callback to invoke after validating the terms.\n\n#### wordpress-validate-posts( path, callback )\n\n* `path`: The directory of posts to validate.\n* `callback` (`function( error )`): Callback to invoke after validating the posts.\n\n#### wordpress-get-postpaths( callback )\n\nGets the post paths for all existing posts in WordPress.\nPost paths are the unique identifiers used by grunt-wordpress.\n\n* `callback` (`function( error, postPaths )` ): Callback to invoke after getting the post paths.\n  * `postPaths`: A hash of post paths to post ids and checksums.\n\n#### wordpress-walk-posts( path, callback, complete )\n\nWalks through all posts in `path` (asynchronous and in series).\n\n* `path`: The directory to walk through.\n* `callback` (`function( post, callback )`): Callback to invoke for each post.\n  * `post`: An object containing the post content and metadata.\n  * `callback`: A callback to invoke after processing the post.\n  Passing an error will stop the helper.\n* `complete` (`function( error )`): Callback to invoke after walking all posts.\n\nIf an error is encountered while parsing the post data or from a callback,\nthe helper will stop walking through posts and immediately invoke the `complete` callback with the error.\n\n#### wordpress-parse-post( path )\n\nParses a file into a post object. See [Post Files](#post-files).\n\n* `path`: The path of the file to parse.\n\n#### wordpress-publish-post( post, callback )\n\nPublishes a post to WordPress.\nAutomatically determines whether to publish a new post or edit an existing post.\n\n* `post`: An object containing post data. See `wordpress-parse-post`.\n* `callback` (`function( error, postId )`): Callback to invoke after publishing the post.\n   * `postId`: Id of the post that was created or edited.\n\n#### wordpress-delete-post( postId, postPath, callback )\n\nDeletes a post from WordPress.\n\n* `postId`: Id of the post to delete.\n* `postPath`: Post path (unique identifier) of the post to delete.\n* `callback`: (`function( error )`): Callback to invoke after deleting the post.\n\n#### wordpress-sync-posts( path, termMap, callback )\n\nSynchronizes all posts in `path` to the WordPress site.\n\n* `path`: The directory containing posts to synchronize.\n* `termMap`: Hash of hierarchical term slugs to term ids. See `wordpress-sync-terms`.\n* `callback` (`function( error )`): Callback to invoke after synchronizing all posts.\n\n#### wordpress-get-terms( callback )\n\nGets all terms that exist in WordPress, grouped by taxonomy.\n\n* `callback` (`function( error, terms )`): Callback to invoke after getting the terms.\n   * `terms`: Hash of terms, keyed by taxonomy and hierarchical slug.\n\n#### wordpress-publish-term( term, callback )\n\nPublishes a term to WordPress.\nAutomatically determines whether to publish a new term or edit an existing term.\n\n* `term`: An object containing term data.\n* `callback` (`function( error, termId )`): Callback to invoke after publishing the term.\n   * `termId`: Id of the term that was created or edited.\n\n#### wordpress-delete-term( term, callback )\n\nDeletes a term from WordPress.\n\n* `term`: An object containing term data.\n* `callback` (`function( error )`): Callback to invoke after deleting the term.\n\n#### wordpress-sync-terms( path, callback )\n\nSynchronizes all terms in `path` to the WordPress site. See [taxonomies.json](#taxonomiesjson).\n\n* `path`: The path of the taxonomies JSON file.\n* `callback` (`function( error, termMap )`): Callback to invoke after synchronizing all terms.\n   * `termMap`: Hash of hierarchical term slugs to term ids.\n   Hierarchical term slugs are used for the `termSlugs` post data. See `wordpress-sync-posts`.\n\n#### wordpress-get-resources( callback )\n\nGets the path and checksum for all existing resources in WordPress.\n\n* `callback` (`function( error, resources )` ): Callback to invoke after getting the resources.\n  * `resources`: A hash of resource paths to checksums.\n\n#### wordpress-publish-resource( path, content, callback )\n\nPublishes a resource to WordPress.\nOverwrites existing resources with the same path.\n\n* `path`: The path to publish the resource to (determiens URL).\n* `content`: Base 64 encoded file content.\n* `callback` (`function( error, checksum )`): Callback to invoke after publishing the resource.\n  * `checksum`: Checksum of the encoded content.\n\n#### wordpress-delete-resource( path, callback )\n\nDeletes a resource from WordPress.\n\n* `path`: The path of the resource to delete.\n* `callback`: (`function( error, checksum )`): Callback to invoke after deleting the resource.\n  * `checksum`: The checksum of the file that was deleted.\n  If the file did not exist, the checksum will be empty.\n\n#### wordpress-sync-resources( path, callback )\n\nSynchronizes all resources in `path` to the WordPRess site.\n\n* `path`: The directory containing resources to synchronize.\n* `callback` (`function( error )`): Callback to invoke after synchronizing all resources.\n\n## License\nCopyright 2012 Scott González\nLicensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "_id": "grunt-wordpress@1.0.7",
  "dist": {
    "shasum": "5b4244dad471eb500fd78378617025739cc8e04d"
  },
  "_from": "grunt-wordpress@1.0.7",
  "_resolved": "https://registry.npmjs.org/grunt-wordpress/-/grunt-wordpress-1.0.7.tgz"
}
