module.exports = function(grunt) {
	"use strict";

	function htmlEscape(text) {
		return text
			// supports keeping markup in source file, but drop from inline sample
			.replace(/<!-- @placeholder-start\((.+)\) -->[\s\S]+@placeholder-end -->/g, function(match, input) {
				return "<-- " + input + " -->";
			})
			.replace(/&/g,'&amp;')
			.replace(/</g, '&lt;')
			.replace(/>/g, '&gt;')
			.replace(/"/g, '&quot;')
			.replace(/'/g, '&#039;');
	}

	var // modules
		fs = require( "fs" ),
		//[[OLDCODE:hyunsook.park by updated]]cheerio = require( "cheerio" ),
		hljs = require( "highlight.js" ),
		path = require( "path" ),
		ent = require( "ent" ),
		yaml = require( "js-yaml" ),
		helpers = require( "./libs/helper-build" ).init( grunt ); //[[ADDCODE:hyunsook.park by updated]]

	grunt.registerMultiTask( "build-pages", "Process html and markdown files as pages, include @partials and syntax higlight code snippets", function() {
		var content,
			task = this,
			taskDone = task.async(),
			files = this.data,
			targetDir = grunt.config( "wordpress.dir" ) + "/posts/page/";

		grunt.file.mkdir( targetDir );

		grunt.util.async.forEachSeries( files, function( fileName, fileDone ) {
			var content,
				//[[OLDCODE:hyunsook.park by updated]]post = grunt.helper( "wordpress-parse-post-flex", fileName ),
				//[[ADDCODE:hyunsook.park by updated]]
				post = helpers.wordpress_parse_post_flex( fileName ),
				fileType = /\.(\w+)$/.exec( fileName )[ 1 ],
				targetFileName = targetDir +
					fileName.replace( /^.+?\/(.+)\.\w+$/, "$1" ) + ".html";

			grunt.verbose.write( "Processing " + fileName + "..." );

			function processPost() {
				content = post.content;
				delete post.content;

				// Convert markdown to HTML
				if ( fileType === "md" ) {
					//[[OLDCODE:hyunsook.park by updated]]content = grunt.helper( "parse-markdown", content, post.toc );
					content = helpers.parse_markdown( content, post.toc );
					delete post.toc;
				}

				// Replace partials
				content = content.replace( /@partial\((.+)\)/g, function( match, input ) {
					return htmlEscape( grunt.file.read( input ) );
				});

				// Syntax highlight code blocks
				if ( !grunt.option( "nohighlight" ) ) {
					//[[OLDCODE:hyunsook.park by updated]]content = grunt.helper( "syntax-highlight", { content: content } );
					content = helpers.syntax_highlight( { content: content } );
				}

				post.customFields = post.customFields || [];
				post.customFields.push({
					key: "source_path",
					value: fileName
				});

				// Write file
				grunt.file.write( targetFileName,
					"<script>" + JSON.stringify( post ) + "</script>\n" + content );

				fileDone();
			}

			// Invoke the pre-processor for custom functionality
			//[[OLDCODE:hyunsook.park by updated]]grunt.helper( "build-pages-preprocess", post, fileName, processPost );
			//[[ADDCODE:hyunsook.park by updated]]
			helpers.build_pages_preprocess( post, fileName, processPost );
		}, function() {
			if ( task.errorCount ) {
				grunt.warn( "Task \"" + task.name + "\" failed." );
				taskDone();
				return;
			}
			grunt.log.writeln( "Built " + files.length + " pages." );
			taskDone();
		});
	});

	grunt.registerMultiTask( "build-resources", "Copy resources", function() {
		var task = this,
			taskDone = task.async(),
			files = this.data,
			targetDir = grunt.config( "wordpress.dir" ) + "/resources/";

		grunt.file.mkdir( targetDir );

		grunt.util.async.forEachSeries( files, function( fileName, fileDone )  {
			grunt.file.copy( fileName, targetDir + fileName.replace( /^.+?\//, "" ) );
			fileDone();
		}, function() {
			if ( task.errorCount ) {
				grunt.warn( "Task \"" + task.name + "\" failed." );
				taskDone();
				return;
			}
			grunt.log.writeln( "Built " + files.length + " resources." );
			taskDone();
		});
	});

};
